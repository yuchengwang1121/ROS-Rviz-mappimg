controller_frequency: 3.0
recovery_behavior_enabled: false
clearing_rotation_allowed: false

TrajectoryPlannerROS:
   max_vel_x: 1.5  # The maximum forward velocity allowed for the base in meters/sec
   min_vel_x: 0.2  # The minimum forward velocity allowed for the base in meters/sec
   max_vel_y: 0.0  # zero for a differential drive robot
   min_vel_y: 0.0
   max_vel_theta: 1.0  # The maximum rotational velocity allowed for the base in radians/sec
   min_vel_theta: -1.0  # The minimum rotational velocity allowed for the base in radians/sec
   min_in_place_vel_theta: 0.4  # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
   
   escape_vel: -0.1 # Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
   acc_lim_x: 2.5 # The x acceleration limit of the robot in meters/sec^2
   acc_lim_y: 0.0  # zero for a differential drive robot
   acc_lim_theta: 3.2 # The rotational acceleration limit of the robot in radians/sec^2
   holonomic_robot: false # For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing

   yaw_goal_tolerance: 0.3  # The tolerance in radians for the controller in yaw/rotation when achieving its goal
   xy_goal_tolerance: 0.1  # 5 cm # The tolerance in meters for the controller in the x & y distance when achieving a goal
   latch_xy_goal_tolerance: false # If goal tolerance is latched, whether the robot ever reaches the goal xy location, it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so
   path_distance_bias: 0.4 # The weighting for how much the controller should stay close to the path it was given
   goal_distance_bias: 0.8 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
   meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells.

   heading_lookahead: 0.325 # How far to look ahead in meters when scoring different in-place-rotation trajectories
   heading_scoring: false # Whether to score based on the robot's heading to the path or its distance from the path
   heading_scoring_timestep: 0.8 # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring~<name>/dwa (bool, default: true)
   occdist_scale: 0.05 # The weighting for how much the controller should attempt to avoid obstacles
   oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset
   publish_cost_grid_pc: false # When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
   prune_plan: true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them

   sim_time: 1.0 # The amount of time to forward-simulate trajectories in seconds
   sim_granularity: 0.05 # The step size, in meters, to take between points on a given trajectory
   angular_sim_granularity: 0.1 # The step size, in radians, to take between angular samples on a given trajectory
   vx_samples: 8 # The number of samples to use when exploring the x velocity space
   vy_samples: 0 # zero for a differential drive robot
   vtheta_samples: 20 # The number of samples to use when exploring the theta velocity space
   dwa: true # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
   simple_attractor: false

