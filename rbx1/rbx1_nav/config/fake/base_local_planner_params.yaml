controller_frequency: 3.0
recovery_behavior_enabled: false
clearing_rotation_allowed: false

TrajectoryPlannerROS:
   max_vel_x: 1.5  # The maximum forward velocity allowed for the base in meters/sec
   min_vel_x: 0.2  # The minimum forward velocity allowed for the base in meters/sec
   max_vel_y: 0.0  # zero for a differential drive robot
   min_vel_y: 0.0
   max_vel_theta: 1.0  # The maximum rotational velocity allowed for the base in radians/sec
   min_vel_theta: -1.0  # The minimum rotational velocity allowed for the base in radians/sec
   min_in_place_vel_theta: 0.2  # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
   escape_vel: -0.1 # Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape.
   acc_lim_x: 1.5 # The x acceleration limit of the robot in meters/sec^2
   acc_lim_y: 0.0  # zero for a differential drive robot
   acc_lim_theta: 1.2 # The rotational acceleration limit of the robot in radians/sec^2

   holonomic_robot: false # For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing

   yaw_goal_tolerance: 0.2  # The tolerance in radians for the controller in yaw/rotation when achieving its goal
   xy_goal_tolerance: 0.05  # 5 cm # The tolerance in meters for the controller in the x & y distance when achieving a goal
   latch_xy_goal_tolerance: false # If goal tolerance is latched, whether the robot ever reaches the goal xy location, it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so
   path_distance_bias: 0.4 # The weighting for how much the controller should stay close to the path it was given
   goal_distance_bias: 0.8 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
   meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells.

   
